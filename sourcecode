#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int num_of_rotations = 0;/* Counter for the number of rotations */
int num_of_comparisons = 0;/* Counter for the number of comparisons */

/* Structure for the Splay Tree node */
struct SplayNode {
    int data;
    int frequency;
    struct SplayNode* parent;
    struct SplayNode* left;
    struct SplayNode* right;
};
typedef struct SplayNode node;

/* Function to create the new node.*/
node* createNode(int value) {
    node* newKey = (node*)malloc(sizeof(node));/* Allocate memory for new node */
    if (newKey != NULL) {
        newKey->data = value;
        newKey->frequency = 0; /* Initially frequency must be 0. */
        newKey->left = NULL;
        newKey->right = NULL;
        newKey->parent = NULL;
    }
    return newKey;
}

/* Function to perform a left rotation */
void leftRotation(node** root, node* current) {
    node* r_child = current->right; /* Set r_Child as the right child of current */
    current->right = r_child->left; /* Transfer r_child's left child to current's right */
    if (r_child->left) {
        r_child->left->parent = current;
    }
    r_child->parent = current->parent; /* Update parent */
    if (current->parent == NULL) {
        *root = r_child;
    } else if (current == current->parent->left) {
        current->parent->left = r_child;
    } else {
        current->parent->right = r_child;
    }
    r_child->left = current; /* Complete the rotation */
    current->parent = r_child;
    num_of_rotations++; /* Increment rotation counter */
}

/* Function to perform a right rotation */
void rightRotation(node** root, node* current) {
    node* l_child = current->left;  /* Set l_child as the left child of current */
    current->left = l_child->right; /* Transfer l_child's right child to current's left */
    if (l_child->right) {
        l_child->right->parent = current;
    }
    l_child->parent = current->parent; /* Update parent */
    if (current->parent == NULL) {
        *root = l_child;
    } else if (current == current->parent->left) {
        current->parent->left = l_child;
    } else {
        current->parent->right = l_child;
    }
    l_child->right = current; /* Complate rotation */
    current->parent = l_child;
    num_of_rotations++; /* Increment rotation counter */
}

void splay(node** root, node* current) {
    while (current->parent != NULL) {
        if (current->parent->parent == NULL) {/* If current's parent is the root */
            if (current == current->parent->left) {
                rightRotation(root, current->parent);/* Perform Zig rotation */
            } else {
                leftRotation(root, current->parent); /* Perform Zag rotation */
            }
        } else if (current == current->parent->left && current->parent == current->parent->parent->left) {
            rightRotation(root, current->parent->parent); /* Perform Zig-Zig rotation */
            rightRotation(root, current->parent);
        } else if (current == current->parent->right && current->parent == current->parent->parent->right) {
            leftRotation(root, current->parent->parent); /* Perform Zag-Zag rotation */
            leftRotation(root, current->parent);
        } else if (current == current->parent->left && current->parent == current->parent->parent->right) {
            rightRotation(root, current->parent);  /* Perform Zig-Zag rotation */
            leftRotation(root, current->parent);
        } else {
            leftRotation(root, current->parent);  /* Perform Zag-Zig rotation */
            rightRotation(root, current->parent);
        }
    }
}

/* Function to search key for a key in the Splay Tree */
node* searchKeySplay(node** root, int value) {
    node* temp = *root;

    while (temp != NULL) {
        if (value < temp->data) {
            temp = temp->left;
            num_of_comparisons++;/* Increment comparison counter */
        } else if (value > temp->data) {
            temp = temp->right;
            num_of_comparisons++;
        } else { /* Key found */
            num_of_comparisons++;/* Increment comparison counter */
            splay(root, temp);  /* Splay the found key */
            return temp;      
        }
    }
    return NULL; 
}

/* Function to insert a key into the Splay Tree */
void insertKeySplay(node** root, int value) {
	
	node* temp = searchKeySplay(root,value);/* Search for the key */
	if(temp != NULL){
		temp->frequency++; /* Increment frequency if key already in the Splay tree */
		return;
	}
	
    node* current = *root;
    node* parentNode = NULL;

    while (current != NULL) { /* Traverse the tree to find true location */
        parentNode = current;
        if (value < current->data) {
            current = current->left;
        } else if (value > current->data) {
            current = current->right;
        } else { /* Key found */
            current->frequency++;
            splay(root, current);
            return;
        }
    }

    node* newKey = createNode(value);
    newKey->parent = parentNode;

    if (parentNode == NULL) {
        *root = newKey; /* Insert as root if tree is empty */
    } else if (value < parentNode->data) {
        parentNode->left = newKey;
    } else {
        parentNode->right = newKey;
    }

    splay(root, newKey);/* Splay the inserted key */
}

/* Function to insert a key into the Mod-Splay Tree */
void insertKeyModSplay(node** root, int value) {
    node* current = *root;
    node* parentNode = NULL;

    while (current != NULL) { /* Traverse the tree to find true location */
        parentNode = current;
        num_of_comparisons++; /* Increment comparison counter */
        if (value < current->data) {
            current = current->left;
        } else if (value > current->data) {
            current = current->right;
        } else {  /* Key found */
            current->frequency++;/* Increment the frequency */
            
            /* Perform splay if frequency of current greater than frequency of the root */
            if (current != *root && current->frequency > (*root)->frequency) {
                splay(root, current);
            }
            return;
        }
    }

    node* newKey = createNode(value);
    newKey->parent = parentNode;

    if (parentNode == NULL) {
        *root = newKey; /* Insert as root if tree is empty */
    } else if (value < parentNode->data) {
        parentNode->left = newKey;
    } else {
        parentNode->right = newKey;
    }
    
    /* Checking whether the frequency of the newKey is greater than the frequency of root */
    if (*root == NULL || newKey->frequency > (*root)->frequency) {
        splay(root, newKey); /* Splay the inserted key */
    }
}


/* Function to perform a pre-order traversal of the Splay Tree */
void preOrderSplay(node* root) {
    if (root != NULL) {
        printf("%d, ", root->data);
        preOrderSplay(root->left);
        preOrderSplay(root->right);
    }
}

/* Function to perform a pre-order traversal of the Mod-Splay Tree */
void preOrderModSplay(node* root) {
    if (root != NULL) {
        printf("(%d,%d) ", root->data, root->frequency); 
        preOrderModSplay(root->left);
        preOrderModSplay(root->right);
    }
}

int main() {
    node* splayTree = NULL;
    node* modSplayTree = NULL;

    FILE* fptr = fopen("input.txt", "r");/* Open the input file */
    if (fptr == NULL) {
        printf("File could not opened!");
        return 1;
    }

    int values[100]; /* Array to store input values */
    int n = 0; /* Counter for the number of values */

    char line[100];
    if (fgets(line, sizeof(line), fptr)) {
        char* element = strtok(line, ",");
        while (element != NULL) {
            values[n++] = atoi(element); 
            element = strtok(NULL, ",");
        }
    }
    fclose(fptr);

    int i;
    for (i = 0; i < n; i++) {
        insertKeySplay(&splayTree, values[i]);
    }

    printf("Splay Tree\n");
    printf("Tree (pre-order traversal): ");
    preOrderSplay(splayTree);
    int splay_total_cost = num_of_comparisons + num_of_rotations; /* Calculation of the total cost of splay tree*/
    printf("\nTotal Cost: %d\n", splay_total_cost);

    num_of_rotations = 0;
    num_of_comparisons = 0;
    
    for (i = 0; i < n; i++) {
        insertKeyModSplay(&modSplayTree, values[i]);
    }

    printf("\nMod-Splay Tree\n");
    printf("Tree (pre-order traversal): ");
    preOrderModSplay(modSplayTree);
    int mod_splay_total_cost = num_of_comparisons + num_of_rotations; /* Calculation of the total cost of mod-splay tree*/
    printf("\nTotal Cost: %d\n", mod_splay_total_cost);

    return 0;
}
